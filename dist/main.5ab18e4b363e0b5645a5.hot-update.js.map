{"version":3,"file":"main.5ab18e4b363e0b5645a5.hot-update.js","sources":["C:/Users/Administrator/Desktop/ClientApp/words-app/src/components/Home.tsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport {\r\n  withRouter\r\n} from 'react-router-dom';\r\nimport { Container, Fade } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Input } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport List  from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        currentWord: state.currentWord\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = {\r\n    openModal: (value: string) => ({type: \"OPEN_MODAL\", payload: value}),\r\n    closeModal: () => ({type: \"CLOSE_MODAL\", payload: null})\r\n}\r\n\r\nlet connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ninterface Props extends ConnectedProps<typeof connector> {\r\n}\r\n\r\ninterface Definition{\r\n    partOfSpeech: string,\r\n    definition: string\r\n}\r\n\r\ninterface State{\r\n    searchText: string,\r\n    definitions: Definition[],\r\n    word: string | null,\r\n    addToDict: boolean,\r\n    isOpenAlert: boolean,\r\n    inProgress: boolean,\r\n    [k: string]: string | boolean | Definition[] | null;\r\n}\r\n\r\nclass Home extends Component<Props, State> {\r\n    constructor(props: Readonly<Props>) {\r\n        super(props);\r\n        this.state = {\r\n            definitions: [],\r\n            searchText: \"\",\r\n            word: null,\r\n            addToDict: false,\r\n            isOpenAlert: false,\r\n            inProgress: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.currentWord){\r\n            this.setState({ searchText: this.props.currentWord }, this.search);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<Props>){\r\n    }\r\n\r\n    search = () => {\r\n        if(!this.state.searchText) return;\r\n        \r\n        this.setState({inProgress: true});\r\n        let text = this.state.searchText;\r\n        fetch(`/api/words?name=${text}`).then(res => res.json()).then(res => {\r\n            if(!res.data){\r\n                this.setState({ definitions: [], addToDict: false });\r\n                return;\r\n            }\r\n            let definitions = res.data.definitions.sort((a: Definition, b:Definition) => (a.partOfSpeech > b.partOfSpeech ? 1 : -1));\r\n            let addToDict = res.addToDict;\r\n            this.setState({ definitions, addToDict, inProgress: false });\r\n        });\r\n    }\r\n\r\n    add = () => {\r\n        this.setState({ inProgress: true });\r\n        let word = this.state.searchText;\r\n        fetch(`/api/words`, {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ word }),\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                this.setState({ addToDict: false, isOpenAlert: data.flag });\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n                this.setState({ inProgress: false });\r\n                alert();\r\n        });\r\n    }\r\n\r\n    enter = (e: React.KeyboardEvent) => {\r\n        if (e.which !== 13) return;\r\n        this.search();\r\n    }\r\n\r\n    change = (field: string, value: string) => {\r\n        this.setState({\r\n            [field]: value\r\n        });\r\n    }\r\n\r\n    closeAlert = () => {\r\n        this.setState(prev => ({\r\n            isOpenAlert: !prev.isOpenAlert\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        let wordList = null;\r\n        if(this.state.inProgress){\r\n            wordList = <LinearProgress />;\r\n        }else{\r\n            if(this.state.definitions.length){\r\n                let list = this.state.definitions.map((item: Definition, index) => {\r\n                    return <React.Fragment key={index}>\r\n                            <ListItem button>\r\n                                <ListItemText primary={item.definition} secondary={item.partOfSpeech} />\r\n                            </ListItem>\r\n                            <Divider component=\"li\" />\r\n                        </React.Fragment>;\r\n                });\r\n        \r\n                wordList = <List className=\"word-list\">\r\n                    {list}\r\n                </List>;\r\n            }\r\n        }\r\n        return (\r\n        <Container maxWidth=\"lg\" fixed className=\"home\">\r\n            <div className=\"home-header\">\r\n                <div className=\"text-block\">\r\n                    WORDS\r\n                </div>\r\n            </div>\r\n            <div className=\"home-main\">\r\n                <div className=\"word-search\">\r\n                    <Paper component=\"div\" elevation={3}  className=\"paper\">\r\n                        <Input \r\n                            type=\"text\" \r\n                            onKeyPress={this.enter} \r\n                            className=\"input-base flex-1\" \r\n                            value={this.state.searchText} \r\n                            onChange={(e) => this.change('searchText', e.target.value)} \r\n                        />\r\n                        <IconButton type=\"button\" className=\"icon-button\" aria-label=\"search\" onClick={this.search}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                        <Divider className=\"divider\" orientation=\"vertical\" />\r\n                        <IconButton color=\"primary\" className=\"icon-button\" disabled={!this.state.addToDict} onClick={this.add}>\r\n                            <AddToPhotosIcon />\r\n                        </IconButton>\r\n                    </Paper>\r\n                </div>\r\n                {wordList}\r\n                <Snackbar open={this.state.isOpenAlert} autoHideDuration={2000} onClose={this.closeAlert} TransitionComponent={Fade}>\r\n                    <MuiAlert elevation={6} variant=\"filled\" onClose={this.closeAlert} severity=\"success\">\r\n                        The word is saved.\r\n                    </MuiAlert>\r\n                </Snackbar>\r\n            </div>\r\n        </Container>);\r\n    }\r\n}\r\n\r\nexport default connector(Home);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AAmBA;AACA;AACA;AACA;AAFA;AAsBA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AApCA;AAsCA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAzDA;AA2DA;AACA;AACA;AACA;AA9DA;AAgEA;AACA;AADA;AAGA;AACA;AApEA;AAsEA;AACA;AADA;AAGA;AACA;AAxEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAwnIA;AACA;AAoIA;;;;A","sourceRoot":""}